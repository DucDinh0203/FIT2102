/** Exercise 1:
    Write a function called projectEulerProblem2Imperative
    to solve Project Euler Problem 2 using a while loop.  

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed max, find the sum of the even-valued terms.
*/
function projectEulerProblem2_imperative(max) {
    let a = 1;
    let b = 2;
    let sum = 0;
    while (b <= max){
        if(b % 2 == 0){
            sum += b;
        }
        const temp = b;
        b += a;
        a = temp;
    }
    return sum;
}

/** Exercise 2:
 * write another version of the function which uses no mutable variables.
 */
// function projectEulerProblem2_pure(max) {
//     // if(max < 2){
//     //     return max;
//     // }
//     // else {
//     //     return projectEulerProblem2_pure(max-1) + projectEulerProblem2_pure(max-2);
//     // }
//     return projectEulerProblem2_pure_aux(max, 1, 2)
// } 
// function projectEulerProblem2_pure_aux(max, fib1, fib2){
//     if (fib2 > max) {
//         return 0;
//     }
//     else if (fib2 % 2 === 0){
//         return fib2 + projectEulerProblem2_pure_aux(fib2, fib1 + fib2, max);
//     }
// }
function projectEulerProblem2_pure(max){
    if (n2 <= max && n2 % 2 == 0) {
        return projectEulerProblem2_pure(max, n2, n1+n2, sum+n2);
    } else if (n2 <= max && n2 % 2 == 1) {
        return projectEulerProblem2_pure(max, n2, n1+n2, sum);
    }
    else {
        return sum;
    }
}

/** Exercise 3:
 * Write a function `isDivisibleBy` which takes as argument a number `n`.
 * `isDivisibleBy` should return a function which takes an argument `x` 
 *   and returns `x` if `x` is divisible by `n`, or 0 otherwise.
 */
function isDivisibleBy(n) {
    function check(x){
        if (x % n == 0){
            return x;
        }
        else {
            return 0;
        }
    }
    return check;
}

/** Exercise 4:
 * write a function which computes the sum of Fibonacci numbers up to `max`, 
 * which are divisible by 3.  Use `isDivisibleBy` to create the function to test divisibility by 3.
 */
function sumOfFibsDivisibleByThree(max) {
    const divisibleByThree = isDivisibleBy(3); 
    if (n2 <= max && divisibleByThree(n2)) {
        return sumOfFibsDivisibleByThree(max, n2, n1+n2, sum+n2);
    } 
    else if (n2 <= max && !divisibleByThree(n2)) {
        return sumOfFibsDivisibleByThree(max, n2, n1+n2, sum);
    }
    else {
        return sum;
    }
} 
